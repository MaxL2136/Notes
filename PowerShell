---------------------------------------------------------------------------------------------------DAY 1---------------------------------------------------------------------------------------------------------------------------
get-command -verb get 
  -Examples
  will get all commands using the verb get, -noun will do the same for a given noun
get-process 
  PS equivelent to ps -elf
get-help *log* 
  -online will open webpage
get-childitem 
  -path specifys path
  -filter, smiilat to grep
Read-Host
  prompts for user input
Get-Process -Name s*
  Display a list of all running processes that start with the letter "s"
get-service | where-object {$_.status -eq "running"}
  displays all running services 
write-host will not send output down the line, only prints to screen
write-output will send output down the line
remove-variable 
  nukes a variable 
'single quotes' is literal 
"double quotes" expand variables 
```
PowerShell quoting website 
  https://www.red-gate.com/simple-talk/sysadmin/powershell/when-to-quote-in-powershell/
```
Hash Table websites 
  https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_hash_tables?view=powershell-7.4
```
Bracket useage  
  https://www.tutorialspoint.com/powershell/powershell_brackets.htm
------------------------------------------------------------------------------------------------DAY 2----------------------------------------------------------------------------------------------------------------------------
Command Substitution
  $myblock = {Get-Service | ft name, status} 
  & $myblock 
Grouping output
  Get-Service | Group-Object status
    sorts get-service by status, running or stopped
$._ is a placeholder for the previous output
Expand Property
  Get-Process |Select-Object -ExpandProperty name
    Eliminated headers in output
Display the start time of the earliest and latest running processes
    Get-Process | select name,StartTime | sort -Property starttime 
Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
    Date | select-Object -Property dayofweek
Identify a cmdlet that displays a list of installed hotfixes.
    Get-Hotfix
Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
    Get-HotFix | select InstalledOn, HotFixID | Sort-Object -Property InstalledOn
Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
    Get-HotFix | select Description, InstalledOn, HotFixID | Sort-Object -Property Description
Finds all .txt files with a length greater than 100 bytes
    gci C:\ *.txt | Where-Object{$_.length -gt 100}
Finds processes by companys starting in micro 
    Get-Process | Where-Object {$_.Company -like 'micro*'}
Srots processes not containing powershell and sorts decending by id 
    Get-Process | Where-Object {$_.Name -notlike 'Powershell*'} | Sort-Object id -Descending

    Get-Process | Where-Object proceesname -ne "Idle" | Sort-Object starttime | Select-Object -last 10 | ft processname, starttime

Get-Unique 
    will only show unique outputs 
Measures something about system32
    gci C:\windows\system32 | Measure-Object Length 
Simple ForEach 
    $array = 1,2,3,4,5,6
    $sum = 0
    $array | ForEach-Object { $sum += $_}
    $sum
Compare the Length and name of the two variables 
    Compare-Object $before $after -Property Length, Name 
Object creation 
    $MyTruck = New-Object object
Adding Proporties 
    Add-Member -MemberType NoteProperty -Name Color -Value Black -InputObject $MyTruck
    Add-Member -Me NoteProperty -in $MyTruck -Na Make -Value Ford 
    Add-Member -InputObject $MyTruck NoteProperty Model "F-250"
Adding methods 
    Add-Member -MemberType ScriptMethod -InputObject $MyTruck -Name Drive -Value { "Hittin a Roadtrip" }
    Add-Member -InputObject $MyTruck ScriptMethod Accelerate { "Hit the loud pedal" }
    $MyTruck | Add-Member ScriptMethod Park { " Get in the spot bozo" } 
      $mytruck.[method]() 
RegEx example 
    $text = "Your account username is ACE4495"
    $pattern = '([A-F]{3}(\d{4}))'
    $text -match $pattern
If Statement 
    $x = 6
    if ($x -eq 5) {
        Write-Host "Bob"
    }
    elseif ($x -eq 4) {
        Write-Host "Sue"
    }
    elseif ($x -eq 2) {
        Write-Host "Tom"
    }
    elseif ($x -gt 6) { 
        Write-Host "Mary"
    }
    else {
        Write-Host "Who am I"
    }
