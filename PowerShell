---------------------------------------------------------------------------------------------------DAY 1---------------------------------------------------------------------------------------------------------------------------
get-command -verb get 
  -Examples
  will get all commands using the verb get, -noun will do the same for a given noun
get-process 
  PS equivelent to ps -elf
get-help *log* 
  -online will open webpage
get-childitem 
  -path specifys path
  -filter, smiilat to grep
Read-Host
  prompts for user input
Get-Process -Name s*
  Display a list of all running processes that start with the letter "s"
get-service | where-object {$_.status -eq "running"}
  displays all running services 
write-host will not send output down the line, only prints to screen
write-output will send output down the line
remove-variable 
  nukes a variable 
'single quotes' is literal 
"double quotes" expand variables 
[Math]::Sqrt(64) 
  Gives square root 
[Math]::Pow(6,2)
  gives 6 to the power of two
-Match 
  matches an expression 
```
PowerShell quoting website 
  https://www.red-gate.com/simple-talk/sysadmin/powershell/when-to-quote-in-powershell/
```
Hash Table websites 
  https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_hash_tables?view=powershell-7.4
```
Bracket useage  
  https://www.tutorialspoint.com/powershell/powershell_brackets.htm
------------------------------------------------------------------------------------------------DAY 2----------------------------------------------------------------------------------------------------------------------------
Command Substitution
  $myblock = {Get-Service | ft name, status} 
  & $myblock 
Grouping output
  Get-Service | Group-Object status
    sorts get-service by status, running or stopped
$._ is a placeholder for the previous output
Expand Property
  Get-Process |Select-Object -ExpandProperty name
    Eliminated headers in output
Display the start time of the earliest and latest running processes
    Get-Process | select name,StartTime | sort -Property starttime 
Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
    Date | select-Object -Property dayofweek
Identify a cmdlet that displays a list of installed hotfixes.
    Get-Hotfix
Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
    Get-HotFix | select InstalledOn, HotFixID | Sort-Object -Property InstalledOn
Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
    Get-HotFix | select Description, InstalledOn, HotFixID | Sort-Object -Property Description
Finds all .txt files with a length greater than 100 bytes
    gci C:\ *.txt | Where-Object{$_.length -gt 100}
Finds processes by companys starting in micro 
    Get-Process | Where-Object {$_.Company -like 'micro*'}
Srots processes not containing powershell and sorts decending by id 
    Get-Process | Where-Object {$_.Name -notlike 'Powershell*'} | Sort-Object id -Descending

    Get-Process | Where-Object proceesname -ne "Idle" | Sort-Object starttime | Select-Object -last 10 | ft processname, starttime

Get-Unique 
    will only show unique outputs 
Measures something about system32
    gci C:\windows\system32 | Measure-Object Length 
    ```
    1,2,3,4,5 | Measure-Object -Average 
    
    
    Count    : 5
    Average  : 3
    Sum      : 
    Maximum  : 
    Minimum  : 
    Property : 
    ```
    #Outputs just the average
    (1,2,3,4,5 | Measure-Object -Average).Average
     ``` 
Simple ForEach 
    $array = 1,2,3,4,5,6
    $sum = 0
    $array | ForEach-Object { $sum += $_}
    $sum
Compare the Length and name of the two variables 
    Compare-Object $before $after -Property Length, Name 
Object creation 
    $MyTruck = New-Object object
Adding Proporties 
    Add-Member -MemberType NoteProperty -Name Color -Value Black -InputObject $MyTruck
    Add-Member -Me NoteProperty -in $MyTruck -Na Make -Value Ford 
    Add-Member -InputObject $MyTruck NoteProperty Model "F-250"
Adding methods 
    Add-Member -MemberType ScriptMethod -InputObject $MyTruck -Name Drive -Value { "Hittin a Roadtrip" }
    Add-Member -InputObject $MyTruck ScriptMethod Accelerate { "Hit the loud pedal" }
    $MyTruck | Add-Member ScriptMethod Park { " Get in the spot bozo" } 
      $mytruck.[method]() 
RegEx example 
    $text = "Your account username is ACE4495"
    $pattern = '([A-F]{3}(\d{4}))'
    $text -match $pattern
If Statement 
    $x = 6
    if ($x -eq 5) {
        Write-Host "Bob"
    }
    elseif ($x -eq 4) {
        Write-Host "Sue"
    }
    elseif ($x -eq 2) {
        Write-Host "Tom"
    }
    elseif ($x -gt 6) { 
        Write-Host "Mary"
    }
    else {
        Write-Host "Who am I"
    }
ForEach Examples 
    $nums =  1,2,3,4,5 
    $nums | ForEach-Object{$_ * 2} 
    ```
    #Makes all objects in $list to uppercase 
    $list = 'a', 'b', 'c', 'd'
    $list | ForEach-Object {$_.toupper()}
    ```
    $nums =  1,2,3,4,5 
    $sum = 0 
    $nums | ForEach-Object{$sum += $_} 
    $sum
    ```
    #Makes the first name of the 10 objects of a Get-Process uppercase 
    Get-Process | Select-Object -First 10 | ForEach-Object {$_.Name} | ForEach-Object {$_.toupper()} 
    ``` 
    #gets every item in student foler 
    foreach ($item in gci C:\Users\student -Recurse){$item.name}
    ```
    #Puts sportsball infront of each item in teams 
    $team = "yankees", "fsu", "tigers", "greenjackets"
    foreach($team in $team){"sportsball $team"}
While Statements 
    $var = ""
    while($var -ne "MUHTH"){
        $var = Read-Host " what branch in the military is the st" 
        }
    ```
    #While goes until true 
    $num = 0 
    do { 
        $num
        $num ++
       }while($num -le 3)
    ```
    #until goes until false 
    $num = 0 
    do { 
        $num
        $num ++
       }until($num -gt 555)    
    ``` 
For Loop 
    for($num =1; $num -le 3; $num ++){$num}
    ```
    for($i =0; $i -le 255; $i ++){
        Write-Host 192.168.0.$i
    }
Writing to a file 
    Set-Content -path .\example.txt -value "a string"
Reading a file 
    Get-Content .\example.txt
Adding to a file 
  add-content .\example.txt -Value "Kms"
---------------------------------------------------------------------------------------------------DAY 3--------------------------------------------------------------------------------------------------------------------------
#"elements provided on the pipeline"

function print-psitem{
    Begin{}
    Process{foreach($i in $PSItem){$i}}
    End{}
}
```
$Matches $PSitem $input
  Important automatic variables 
```
#Create an advanced function using Begin, Process, and End, that takes two(2) arguments. The first argument being an array of at least ten(10) integers and the second argument being a single integer. Search the array argument for 
#every occurrence of the single integer argument then return the sum of all elements in the array excluding every occurrence of the single integer argument.


    function get-multisum([array]$array, [int]$number){
        Begin{$sum = 0}
        process{
            foreach($num in $array){
                if ($num -eq $number){
                    continue
                    }
                    $sum += $num
                }
        }
        End{$sum}
    
    }
```
#Create an advanced function using Begin, Process, End, that prompts the user to enter the names of three(3) 
#U.S. States then returns the names of the states in the order of \
#longest name to shortest name and the amount of characters in each name.

    function get-longname{
        Begin{
            $count = 0 #keep track of how many states entered
            $states = @()
            }
        process{
    
            while($count -lt 3){
                $usr = Read-Host "Enter A State"
                $states += $usr #appends user input to states
                $count += 1 
                }
        
        
        
        
        }
        End{
        $list = $states | sort -Property Length -Descending
        Foreach($state in $list){
            "$state`:" + $state.length 
            }
        }
    }
```
#Create a function that extracts your current IP, Subnet and Gateway and outputs them in the following format:
    function Get-netInfo{
        $pattern = '.*?((\d{1,3}\.){3}\d{1,3})'#Shitty RehEx ip finder
        $netinfo = ipconfig
        $ip = $netinfo -match "IPv4$pattern" | ForEach-Object{if ($_ -match $pattern){$Matches[1]}}
        $subnet =  $netinfo -match "Subnet$pattern" | ForEach-Object{if ($_ -match $pattern){$Matches[1]}}
        $gateway = $netinfo -match "Gateway$pattern" | ForEach-Object{if ($_ -match $pattern){$Matches[1]}}
        "IP: {0}`nSubnet: {1}`nGateway: {2}" -f $ip,$subnet,$gateway #formatting output 


}
```
#Create a function that extracts all the URLs found in the file "dns.txt" and outputs URLs, the amount of times the URL is found in the file and the total amount of URLs found.


    function Get-URLinfo{
        $file = Get-Content .\dns.txt
        $regex = '([a-zA-Z0-9\-\.]+\.(com|org|net))'
        foreach($line in $file){
            if($line -match $regex) {
                $Matches
                }
            }
        }
---------------------------------------------------------------------------REVIEW------------------------------------------------------------------------------------------------
<# 1 #>
function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $num = ($var1 * $var2 * $var3 * $var4)
    return $num
}
```#2
function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>
    foreach($row in $arr){
        if($row[0] -eq $key){
            return $row[9]
            }
    }
    return -1 

}
```#3
function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    
        $nums = @()
   
        while($true){
            $usr = Read-Host "Enter a positive number"
            $nums += $usr
             
            if($usr -eq -1){
                break
                }
            }
     
       return ($nums | Measure-Object -Maximum).Maximum
}
-------------------------------------------------------------------------------------------------------------------
$vals = @()
do{
$val = read-host
if($val -ne -1){
  $vals += val
}

}until($val -eq -1 )
return ($vals | Measure-Object -Maximum).Maximum 
```#4
function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
    $file = Get-Content $filename 
    return $file[$whichline] 
}
```#5
function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	
    #>
    $new = Get-ChildItem -Path $path | Sort-Object -property Name
    return $new
  
}
```#6
function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
    $sum = 0
   
        foreach($i in $Input){
            $sum += $i
        }
    return $sum   
}
```#7
function q7 {
	<# Return only those commands whose noun is process #>
    return Get-Command -Noun process 
}
```#8
function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
        return [string]"Powershell is $adjective" 
}
```#9 
function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>
    $regex = '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    if($addr -match $regex){
        return $true
        }
        else{ 
        return $false
        }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
foreach($octet in $addr.split(".")){
  if([int]$octet -lt 0 -or [int]$octet -gt 255){
    return $false 
    }
  }
return $True
```#10
function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>
       return (Get-FileHash -Path $filepath -Algorithm SHA256).hash -ne $lasthash
        
}

