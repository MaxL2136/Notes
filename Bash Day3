tar -czf
  Creates an archives zip file
```
Grep IP based on how often they occur 
  grep -P -o "(\d{1,3}\.){3}\d{1,3}" StoryHiddenIPs | sort | uniq -c | sort -r
```
    Using ONLY the awk command, write a BASH one-liner script that extracts ONLY the names of all the system and user accounts that are not UIDs 0-3.
    Only display those that use /bin/bash as their default shell.
    The input file is named $HOME/passwd and is located in the current directory.
    Output the results to a file called $HOME/SED/names.txt
      awk -F: '($7 == "/bin/bash")&&($3 >= 4){print $1}' $HOME/passwd > $HOME/SED/names.txt
```
    Find all dmesg kernel messages that contain CPU or BIOS (uppercase) in the string, but not usable or reserved (case-insensitive)
    Print only the msg itself, omitting the bracketed numerical expressions ie: [1.132775]
      dmesg | grep -P "CPU|BIOS" | grep -P -v -i "usable|reserved" | cut -d] -f2-
``` 
    Write a Bash script using "Command Substitution" to replace all passwords, using openssl, from the file $HOME/PASS/shadow.txt with the MD5 encrypted password: Password1234, with salt: bad4u
    Output of this command should go to the screen/standard output.
          #!/bin/bash 
          A=$(openssl passwd -1 -salt bad4u Password1234) 
          awk -F: -v "new_hash=$A" 'BEGIN {OFS=":"} {$2=new_hash} {print $0}' $HOME/PASS/shadow.txt
```
    Using ONLY sed, write all lines from $HOME/passwd into $HOME/PASS/passwd.txt that do not end with either /bin/sh or /bin/false.
      sed -e '/\/bin\/sh/d' -e '/\/bin\/false/d' $HOME/passwd > $HOME/PASS/passwd.txt
```

    Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.
      ls -l $HOME/CUT | cut -d: -s -f2 | cut -d' ' -f2 -s | cut -d. -f1,2 -s > $HOME/CUT/names
```

    Using ONLY the find command, find all files on the system with inode 4026532575 and print only the filename to the screen, not the absolute path to the file, separating each filename with a newline
      find / -inum 4026532575 -printf "%f\n"
```
     Using ONLY the find command, find all empty files/directories in directory /var and print out ONLY the filename (not absolute path), and the inode number, separated by newlines.
        find /var -empty -printf "%i %f\n"
```
    Copy all files in the $HOME/1123 directory, that end in ".txt", and omit files containing a tilde "~" character, to directory $HOME/CUT.
      find $HOME/1123 -type f -name \*.txt ! -name \*~.txt -exec cp {} $HOME/CUT \;
```
    
    Using find, find all files under the $HOME directory with a .bin extension ONLY.
    Once the file(s) and their path(s) have been found, remove the file name from the absolute path output.
    Ensure there is no trailing / at the end of the directory path when outputting to standard output.
    You may need to sort the output depending on the command(s) you use.
        find $HOME -name \*.bin | rev | cut -d/ -f2- | rev | sort -u
```
     
    Sort the /etc/passwd file numerically by the GID field.
    For the 10th entry in the sorted passwd file, get an md5 hash of that entry’s home directory.
    Output ONLY the MD5 hash of the directory's name to standard output.
        awk -F: '{print $4":"$6}' /etc/passwd | sort -n | head | tail -1 | cut -d: -f2 | md5sum | cut -d' ' -f1

```
      
    Sort the /etc/passwd file numerically by the GID field.
    For the 10th entry in the sorted passwd file, get an md5 hash of that entry’s home directory.
    Output ONLY the MD5 hash of the directory's name to standard output.
      awk -F: '{print $4":"$6}' /etc/passwd | sort -n | head | tail -1 | cut -d: -f2 | md5sum | cut -d' ' -f1

```
If Statement 
    #!/bin/bash
    contents=$(cat simple.txt)
    if [[ $contents == "tacos" ]]; then
        echo"Good on tuesday"
    elif [[ $contents == "costco is amazing"]]; then
        echo"and will save you money"
    elif [[ $contents == "chickenbake" ]]; then 
        echo"taste good"
    else 
        echo"no tax"
    fi
```
wc -l 
  wc is wordcount
  -l gives linecount 
