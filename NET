Student#: student12

Command: ssh student@10.50.31.120 -X

Password: password
User Space Sockets

    Stream socket - TCP

    Datagram socket - UDP
RAW Socket used for pcap, takes all traffic
TCPDUMP 
    -A = print payload in ASCII

    -D = list interfaces

    -i = specify capture interface

    -e = print data-link headers

    -X or XX = print payload in HEX and ASCII

Basic TCPDump options

    -w = write to pcap

    -r = read from pcap

    -v, vv, or vvv = verbosity

    -n = no inverse lookups

Logical Operators

    Primitives may be combined using:

        Concatenation: 'and' ( && )

        Alteration: 'or' ( || )

        Negation: 'not' ( ! )

-d, debugger mode, deconstructs what a partiular filter is doing 
xxd -r file-encoded.txt file-decoded.txt decode a file using hex
Ping Sweep in Linux
    for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done
-Pn for nmap use in tunnels 
-T4 option for use on our network
NETCAT TCP Scan Script
        #!/bin/bash
        echo "Enter network address (e.g. 192.168.0): "
        read net
        echo "Enter starting host range (e.g. 1): "
        read start
        echo "Enter ending host range (e.g. 254): "
        read end
        echo "Enter ports space-delimited (e.g. 21-23 80): "
        read ports
        for ((i=$start; $i<=$end; i++))
        do
            nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
        done
NETCAT UDP Scan Script
        #!/bin/bash
        echo "Enter network address (e.g. 192.168.0): "
        read net
        echo "Enter starting host range (e.g. 1): "
        read start
        echo "Enter ending host range (e.g. 254): "
        read end
        echo "Enter ports space-delimited (e.g. 21-23 80): "
        read ports
        for ((i=$start; $i<=$end; i++))
        do
            nc -nuvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open'
        done
NETCAT Bannar Grab
        nc 172.16.82.106 22 | -u for udp
ss -ntlp | new netstat
FIND COMMANDS
        find / -iname hint* 2> /dev/null
        find / -iname flag* 2> /dev/null
NET RECON METHODOLOGY 
    -Host Discovery
        Ruby Ping sweep
            for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done
        Nmap scan if no ping 
    -Port Discovery 
        nmap
        nc scan script 
    -Port Validation 
        Bannar grab using nc [ipaddr] [port]
    -Follow on based on ports found 
        if 21 or 80 wget -r [IPADDR] or wget -r ftp://[IPADDR]
        if 22 or 23 Connect and get Passive recon 
        if no 22 and 23 but you have 21 
            FTP [ipaddr]
            ls | get [filename]
SCAN METHODOLOGY 
    nmap -Pn [IPADDR] -T4 -p 21-23,80
        Quick scan ports 21-23 80 
        which tcpdump wireshark nmap telnet get curl ping 

PASSIVE RECON METHODOLOGY
    hostname 
    Permissions
        sudo -l
    interfaces and subnets 
        ip a 
        show interface (vyos)
    neigbhors 
        ip neigh
    Route table
        ip route
        show ip route(vyos)
    Files of Intrist 
        find / -iname flag*
    listening ports
        ss -ntlp
IPTABLE OPTIONS 
-t - Specifies the table. (Default is filter)
-A - Appends a rule to the end of the list or below specified rule
-I - Inserts the rule at the top of the list or above specified rule
-R - Replaces a rule at the specified rule number
-D - Deletes a rule at the specified rule number
-F - Flushes the rules in the selected chain
-L - Lists the rules in the selected chain using standard formatting
-S - Lists the rules in the selected chain without standard formatting
-P - Sets the default policy for the selected chain
-n - Disables inverse lookups when listing rules
--line-numbers - Prints the rule number when listing rules

Common iptable options

-p - Specifies the protocol
-i - Specifies the input interface
-o - Specifies the output interface
--sport - Specifies the source port
--dport - Specifies the destination port
-s - Specifies the source IP
-d - Specifies the destination IP
-j - Specifies the jump target action

CHANGE DEFAULT POLICY TO ACCEPT BEFORE FLUSHING RULES

iptables -t [table] -A [chain] [rules] -j [action]

-i [ iface ]

-o [ iface ]

-s [ ip.add | network/CIDR ]

-d [ ip.add | network/CIDR ]

    -m to enable iptables extensions:

-m state --state NEW,ESTABLISHED,RELATED,UNTRACKED,INVALID
NFT RULES 
CREATE CHAIN
nft add chain [family] [table] [chain] { type [type] hook [hook]
    priority [priority] \; policy [policy] \;}
CREATE RULE
nft add rule [family] [table] [chain] [matches (matches)] [statement]

ip [ saddr | daddr { ip | ip1-ip2 | ip/CIDR | ip1, ip2, ip3 } ]

tcp flags { syn, ack, psh, rst, fin }

tcp [ sport | dport { port1 | port1-port2 | port1, port2, port3 } ]

udp [ sport| dport { port1 | port1-port2 | port1, port2, port3 } ]

icmp [ type | code { type# | code# } ]
467accfb25050296431008a1357eacb1_9f7a33941828bdafd2755fd20176cdf4_05e5fb96e2a117e01fc1227f1c4d664c
d3b88e04de1e76482a1972f36734a7d8


0c2ca80fad4accccce3bcecec1d238ce_be33fe60229f8b8ee22931a3820d30ac
